git rebase
menyatukan 2 buah branch

perbedaan:
git merge: kita masuk ke master dulu
git rebase: kita ada di cabang, tapi bisa rebase ke master

list commit ID dari branch feature/b:
877e4c1 (HEAD -> feature/b) file 3 commit ke 2 rebase
50d6007 file 2 commit ke 1 rebase
ea7d4d0 nambah note di master
45d0b4b (tag: v1.0.0, feature/a) menambahkan file5.txt
84c7044 menambahkan file4.txt
7c0bdd2 ini commit pertama

list commit ID dari branch master:
b2666cf file1 rebase dari master
ea7d4d0 nambah note di master
45d0b4b (tag: v1.0.0, feature/a) menambahkan file5.txt
84c7044 menambahkan file4.txt
7c0bdd2 ini commit pertama

list commit ID dari branch feature/b:
877e4c1 (HEAD -> feature/b) file 3 commit ke 2 rebase
50d6007 file 2 commit ke 1 rebase
ea7d4d0 nambah note di master
45d0b4b (tag: v1.0.0, feature/a) menambahkan file5.txt
84c7044 menambahkan file4.txt
7c0bdd2 ini commit pertama

list commit ID dari branch master:
b2666cf file1 rebase dari master
ea7d4d0 nambah note di master
45d0b4b (tag: v1.0.0, feature/a) menambahkan file5.txt
84c7044 menambahkan file4.txt
7c0bdd2 ini commit pertama

git rebase mengambil semua commit dari master ke branch saat ini(kaya ngepull).
git rebase master
(penggabungan commit ID)
hasil rebase:
cfbc204 (HEAD -> feature/b) file 3 commit ke 2 rebase
47432ac file 2 commit ke 1 rebase
9b4e68f (master) update note.txt
dc15a5e update note.txt
b2666cf file1 rebase dari master
ea7d4d0 nambah note di master
45d0b4b (tag: v1.0.0, feature/a) menambahkan file5.txt
84c7044 menambahkan file4.txt
7c0bdd2 ini commit pertama

squash: membuat banyak log commit menjadi 1 log commit  saja
git merge --squash <nama branch>
hasil merge masuk ke staging area (perlu dicommit lagi)
7268a4f (HEAD -> feature/c) file6 ditambahkan dari feature/c commit ke2
a4317ad file 5 diupdate dari branch feature/c commit ke1

protocol ssh: tidak perlu ketik id password tiap push
ssh-keygen
Your identification has been saved in /home/ajusd/.ssh/id_rsa
copy isi id_rsa.pub
di github,
ke profile, settings, ssh and gpg keys
ssh -T git@github.com

di quick setup repository kita, click ssh
copy link ssh
git remote add origin <paste>

ngecek:
git remote
git remote get-url origin

git push origin master
git push origin --all (ngepush semua branch)

git push --delete origin <nama branch> 
menghapus yang ada di github saja, tidak di lokal

git branch -r
melihat branch yg ada di remote

git branch -a
melihat branch yg ada di remote dan local

jika ngeclone, kita hanya mengambil master/repository utamanya saja
kenapa ambil https?
git clone <url> <nama folder yang ingin dibuat>
clone -> ambil repository
fetch -> melihat perubahan pada remote repository

mengambil branch pada remote repository yang di clone:
git checkout -b <nama branch untuk local repository kita> origin/<nama branch yang ingin ditarik>
contoh:
git checkout -b hotfix origin/feature/a
ketika git branch:
* hotfix
* master
dimana hotfix mengambil isi dari feature/a

fetch tidak merubah isi local repository kita, hanya melihat perubahan dari remote repository

git fetch origin master: cuma ngambil perubahan di master
git diff master origin/master: membandingkan local dengan remote

git pull: mengambil perubahan di remote ke master
jika ada merge conflict, harus diperbaiki manual
saat kita pull, kita otomatis akan fetch terlebih dahulu

push tag ke remote repository
git push origin <tag version>
git pull origin: ngambil tag juga
git push --delete origin <versi tag>: menghapus tag 

git request-pull origin <versi ><nama branch kita di local>
contoh:
git request-pull v2.0.0 origin hotfix

dilakukan setelah -> git push origin hotfix
